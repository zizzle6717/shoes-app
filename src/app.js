"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const body_parser_1 = __importDefault(require("body-parser"));
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
const helmet_1 = __importDefault(require("helmet"));
const path_1 = __importDefault(require("path"));
const swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
const yamljs_1 = __importDefault(require("yamljs"));
const logger_1 = __importDefault(require("./middleware/logger"));
const package_json_1 = require("../package.json");
const routes_1 = __importDefault(require("./routes"));
// App config and documentation setup
const app = express_1.default();
const base = `/v${package_json_1.version.split('.')[0]}`;
const swaggerYaml = yamljs_1.default.load(path_1.default.join(__dirname, '../docs/generated/swagger.yaml'));
const swaggerOptions = {
    customCss: '.servers {display: none}',
};
// Middleware
app.use(helmet_1.default());
app.use(body_parser_1.default.urlencoded({ extended: true }));
app.use(body_parser_1.default.json());
app.use(cors_1.default());
app.use(logger_1.default);
// Routes
app.use('/docs/generated/swagger.yaml', express_1.default.static('docs/generated/swagger.yaml'));
app.use('/docs', swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(swaggerYaml, swaggerOptions));
app.use('/coverage', express_1.default.static('coverage/'));
app.use('/_healthz', (req, res) => { res.status(200).json('OK'); });
app.use(base, routes_1.default);
exports.default = app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOERBQXFDO0FBQ3JDLGdEQUF3QjtBQUN4QixzREFBOEI7QUFDOUIsb0RBQTRCO0FBQzVCLGdEQUF3QjtBQUN4Qiw0RUFBMkM7QUFDM0Msb0RBQTBCO0FBQzFCLGlFQUF5QztBQUN6QyxrREFBNEQ7QUFDNUQsc0RBQThCO0FBRTlCLHFDQUFxQztBQUNyQyxNQUFNLEdBQUcsR0FBRyxpQkFBTyxFQUFFLENBQUM7QUFDdEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxzQkFBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2pELE1BQU0sV0FBVyxHQUFHLGdCQUFJLENBQUMsSUFBSSxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztBQUN0RixNQUFNLGNBQWMsR0FBRztJQUNyQixTQUFTLEVBQUUsMEJBQTBCO0NBQ3RDLENBQUM7QUFFRixhQUFhO0FBQ2IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBTSxFQUFFLENBQUMsQ0FBQztBQUNsQixHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuRCxHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMzQixHQUFHLENBQUMsR0FBRyxDQUFDLGNBQUksRUFBRSxDQUFDLENBQUM7QUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBTSxDQUFDLENBQUM7QUFFaEIsU0FBUztBQUNULEdBQUcsQ0FBQyxHQUFHLENBQUMsOEJBQThCLEVBQUUsaUJBQU8sQ0FBQyxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO0FBQ3ZGLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLDRCQUFTLENBQUMsS0FBSyxFQUFFLDRCQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO0FBQ2hGLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGlCQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDbEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXBFLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLGdCQUFNLENBQUMsQ0FBQztBQUV0QixrQkFBZSxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGhlbG1ldCBmcm9tICdoZWxtZXQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgc3dhZ2dlclVpIGZyb20gJ3N3YWdnZXItdWktZXhwcmVzcyc7XG5pbXBvcnQgeWFtbCBmcm9tICd5YW1sanMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL21pZGRsZXdhcmUvbG9nZ2VyJztcbmltcG9ydCB7IHZlcnNpb24gYXMgcGFja2FnZVZlcnNpb24gfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHJvdXRlcyBmcm9tICcuL3JvdXRlcyc7XG5cbi8vIEFwcCBjb25maWcgYW5kIGRvY3VtZW50YXRpb24gc2V0dXBcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IGJhc2UgPSBgL3Yke3BhY2thZ2VWZXJzaW9uLnNwbGl0KCcuJylbMF19YDtcbmNvbnN0IHN3YWdnZXJZYW1sID0geWFtbC5sb2FkKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9kb2NzL2dlbmVyYXRlZC9zd2FnZ2VyLnlhbWwnKSk7XG5jb25zdCBzd2FnZ2VyT3B0aW9ucyA9IHtcbiAgY3VzdG9tQ3NzOiAnLnNlcnZlcnMge2Rpc3BsYXk6IG5vbmV9Jyxcbn07XG5cbi8vIE1pZGRsZXdhcmVcbmFwcC51c2UoaGVsbWV0KCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UobG9nZ2VyKTtcblxuLy8gUm91dGVzXG5hcHAudXNlKCcvZG9jcy9nZW5lcmF0ZWQvc3dhZ2dlci55YW1sJywgZXhwcmVzcy5zdGF0aWMoJ2RvY3MvZ2VuZXJhdGVkL3N3YWdnZXIueWFtbCcpKTtcbmFwcC51c2UoJy9kb2NzJywgc3dhZ2dlclVpLnNlcnZlLCBzd2FnZ2VyVWkuc2V0dXAoc3dhZ2dlcllhbWwsIHN3YWdnZXJPcHRpb25zKSk7XG5hcHAudXNlKCcvY292ZXJhZ2UnLCBleHByZXNzLnN0YXRpYygnY292ZXJhZ2UvJykpO1xuYXBwLnVzZSgnL19oZWFsdGh6JywgKHJlcSwgcmVzKSA9PiB7IHJlcy5zdGF0dXMoMjAwKS5qc29uKCdPSycpOyB9KTtcblxuYXBwLnVzZShiYXNlLCByb3V0ZXMpO1xuXG5leHBvcnQgZGVmYXVsdCBhcHA7XG4iXX0=